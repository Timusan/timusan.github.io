<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>shisaa.be (amavis)</title><link>http://shisaa.be/</link><description></description><atom:link href="http://shisaa.be/categories/amavis.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 05 Jan 2015 12:42:49 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Installing a fully fledged, ready to use mail server on CentOS 6 with Postfix, PostgreSQL, Amavis, ClamAV, Spamassassin and Dovecot - Part 3</title><link>http://shisaa.be/postset/mailserver-3.html</link><dc:creator>Tim van der Linden</dc:creator><description>&lt;div&gt;&lt;h3&gt;Chapter 3 - Milters, the trusty workers&lt;/h3&gt;
&lt;p&gt;Welcome to the third part of our mailserver setup saga.&lt;/p&gt;
&lt;p&gt;If you've missed &lt;a href="http://shisaa.be/postset/mailserver-1.html" title="First chapter of this mailserver series"&gt;chapter 1&lt;/a&gt; or &lt;a href="http://shisaa.be/postset/mailserver-2.html" title="Second chapter of this mailserver series"&gt;chapter 2&lt;/a&gt; I recommend reading them first.&lt;/p&gt;
&lt;p&gt;In this episode, we will be looking a bit closer at our so called "Milters" or "Mail Filters".
Especially the ones who will protect us from evil virusses and floods of spam.&lt;/p&gt;
&lt;p&gt;First, the outline of this chapter:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Install and setup Amavis&lt;/li&gt;
&lt;li&gt;Configure Postfix to let Amavis do some heavy check lifting&lt;/li&gt;
&lt;li&gt;Install and configure ClamAV and make it run with Amavis&lt;/li&gt;
&lt;li&gt;Install and configure Spamassasin and make it run with Amavas&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Lets dive in!&lt;/p&gt;
&lt;h4&gt;Amavis&lt;/h4&gt;
&lt;p&gt;First lets talk about this "Amavis" program, what is it and what does it do...&lt;/p&gt;
&lt;p&gt;Amavis or more better AMaViS stands for "A Mail Virus Scanner", it, well, scans for viruses and checks for spam.
Amavis is a very powerful interface between Postfix and third-party programs. Those third-party applications are most commonly &lt;em&gt;ClamAV&lt;/em&gt; for virus scanning and &lt;em&gt;Spamassassin&lt;/em&gt; for spam filtering.&lt;/p&gt;
&lt;p&gt;In our factory, Amavis would be a separate small conveyor belt installed next to our big Postfix belt.
At that conveyor belt are many workers specially trained to check messages for viruses and spam.&lt;/p&gt;
&lt;p&gt;That's actually all you need to know before installing...so lets go ahead and install it!&lt;/p&gt;
&lt;p&gt;By default your CentOS 6 installation does not carry a recent binary package for that in its basic repositories.
So you will have to add one:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rpm -Uvh http://apt.sw.be/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm
&lt;/pre&gt;


&lt;p&gt;And install it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yum install amavisd-new
&lt;/pre&gt;


&lt;p&gt;You will notice that it installs a bunch of extra Perl modules needed to run Amavis. It also installed Spamassassin by default.
To make our setup complete, we also need ClamAV, so lets go ahead and install this one too:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yum install clamd
&lt;/pre&gt;


&lt;p&gt;Good, so now we have our three new programs installed, lets start by configuring our interface, Amavis.
The main configuration file for Amavis is located at &lt;em&gt;/etc/amavisd.conf&lt;/em&gt;. Open up that file.&lt;/p&gt;
&lt;p&gt;This configuration file is quite daunting, so lets just configure it piece by piece, shall we?&lt;/p&gt;
&lt;p&gt;Lets first check to see if anti-virus and spam filtering are enabled. Check if the two lines that start with &lt;em&gt;@bypass_spam_checks&lt;/em&gt; and &lt;em&gt;@bypass_virus_checks&lt;/em&gt; are commented out.
If you uncomment them, spam and antivirus checking will not happen.&lt;/p&gt;
&lt;p&gt;Then we have to set &lt;em&gt;$mydomain&lt;/em&gt; parameter to your domainname.&lt;/p&gt;
&lt;p&gt;Next up are the &lt;em&gt;$daemon_user&lt;/em&gt; and the &lt;em&gt;$daemon_group&lt;/em&gt; variables. These should match the user and group under which Amavis is allowed to run.
If all is good, both should have been created during the install of Amavis, but it never hurts to check:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep &lt;span class="s2"&gt;"amavis"&lt;/span&gt; /etc/passwd
&lt;/pre&gt;


&lt;p&gt;If it returns the user, everything went well, now lets check for the group:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep &lt;span class="s2"&gt;"amavis"&lt;/span&gt; /etc/group
&lt;/pre&gt;


&lt;p&gt;It returned a group? Perfect! Then lets continue!&lt;/p&gt;
&lt;p&gt;Now we can go back to our &lt;em&gt;amavisd.conf&lt;/em&gt; file and uncomment the &lt;em&gt;$MYHOME&lt;/em&gt; variable and also uncomment and set the &lt;em&gt;$myhostname&lt;/em&gt; variable to read your FQDN: mail.example.com.&lt;/p&gt;
&lt;p&gt;We also have to enable the newly installed ClamAV in our &lt;em&gt;amavisd.conf&lt;/em&gt; file. There is already an entry for that. Search for ClamAV and uncomment these lines:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;### http://www.clamav.net/&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ClamAV-clamd'&lt;/span&gt;,
        &lt;span class="se"&gt;\&amp;amp;&lt;/span&gt;ask_daemon, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"CONTSCAN {}\n"&lt;/span&gt;, &lt;span class="s2"&gt;"/var/run/clamav/clamd.sock"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
        qr/&lt;span class="se"&gt;\b&lt;/span&gt;OK&lt;span class="nv"&gt;$/&lt;/span&gt;, qr/&lt;span class="se"&gt;\b&lt;/span&gt;FOUND&lt;span class="nv"&gt;$/&lt;/span&gt;,
        qr/^.*?: &lt;span class="o"&gt;(&lt;/span&gt;?!Infected Archive&lt;span class="o"&gt;)(&lt;/span&gt;.*&lt;span class="o"&gt;)&lt;/span&gt; FOUND&lt;span class="nv"&gt;$/&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="c"&gt;# # NOTE: run clamd under the same user as amavisd, or run it under its own&lt;/span&gt;
    &lt;span class="c"&gt;# #   uid such as clamav, add user clamav to the amavis group, and then add&lt;/span&gt;
    &lt;span class="c"&gt;# #   AllowSupplementaryGroups to clamd.conf;&lt;/span&gt;
    &lt;span class="c"&gt;# # NOTE: match socket name (LocalSocket) in clamav.conf to the socket name in&lt;/span&gt;
    &lt;span class="c"&gt;# #   this entry; when running chrooted one may prefer socket "$MYHOME/clamd".&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Important to notice is the socket &lt;em&gt;/var/run/clamav/clamd.sock&lt;/em&gt;, this socket has to be the socket where ClamAV is really running.
To check this, open up the ClamAV configuration file at &lt;em&gt;/etc/clamd.conf&lt;/em&gt; and check the variable named &lt;em&gt;Localsocket&lt;/em&gt;.
Make sure that both files have exactly the same path to that socket.&lt;/p&gt;
&lt;p&gt;Also make sure that the path to that socket is accessible to the "clamav" user that was created when installing ClamAV.
So set the correct ownership:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chown -R clamav:clamav /var/run/clamav
&lt;/pre&gt;


&lt;p&gt;Then make sure that the user "clamav" is in the "amavis" group:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;usermod -G amavis clamav
&lt;/pre&gt;


&lt;p&gt;Now amavis will use ClamAV as its primary virus scanner.&lt;/p&gt;
&lt;p&gt;There are three other variables that you should make mental note of for now: &lt;em&gt;$max_servers&lt;/em&gt;, &lt;em&gt;$notify_method&lt;/em&gt; and &lt;em&gt;$forward_method&lt;/em&gt;. We'll come back here later.&lt;/p&gt;
&lt;p&gt;Good, that was a quick rush through the basics of the Amavis configuration, lets first tell Postfix about Amavis and make them work together before we delve a little bit deeper into our milters.
Open up our old friend the &lt;em&gt;master.cf&lt;/em&gt; file from Postfix and add a new transport daemon to be spawned called &lt;em&gt;Amavisfeed&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;amavisfeed unix -       -       n       -       &lt;span class="m"&gt;2&lt;/span&gt;       lmtp
    -o &lt;span class="nv"&gt;lmtp_data_done_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1200
    -o &lt;span class="nv"&gt;lmtp_send_xforward_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;


&lt;p&gt;What did you just do?
Well, you created a so called &lt;em&gt;dedicated lmtp-client&lt;/em&gt; that Postfix can use to communicate with Amavis.
The overwrites under it do the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;-o &lt;span class="nv"&gt;lmtp_data_done_timout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1200
&lt;/pre&gt;


&lt;p&gt;This line sets a timeout limit in seconds for Postfix to wait to claim successful delivery. If a message is not delivered within this time limit, Postfix will give the message a "deferred" status and alert the sender.
We have this separate timeout setting, which is larger then the default Postfix timout, because we now add some new processes that the mail has to go through before it can be delivered.
The workers and the sides of our conveyor belt have just tripled and so has the amount of checking that needs to be done. We have to give these people some more time!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ lmtp_send_xforward_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;


&lt;p&gt;This tells Postfix to give Amavis the messages original IP-address and HELO command and not only the message itself.
With this extra information Amavis is able to do some extra checks to see if this message is genuine.&lt;/p&gt;
&lt;p&gt;You should also note the &lt;em&gt;maxproc&lt;/em&gt; setting on this transport, it reads "2". This should correspond to the &lt;em&gt;$max_servers&lt;/em&gt; variable in the amavisd.conf file.&lt;/p&gt;
&lt;p&gt;Now we have setup the basic integration for when Postfix receives mail. But there is one more important daemon to setup, the &lt;em&gt;reinjection smtp daemon&lt;/em&gt;.
When Amavis is called to check a mail it will pick the mail up from the main Postfix conveyor belt and puts it on its own small conveyor belt.
The specially trained workers then go about there business as instructed by you, the Postmaster, in the amavisd.conf file.&lt;/p&gt;
&lt;p&gt;After the checks are finished, the mail must go back on the conveyor belt so it can be delivered or trashed according to the milters findings.
The process of putting mail back onto the conveyor belt is called "reinjection". This has to be done by a separate SMTP daemon of which Postfix only accepts mail from Amavis.
A special entrance to the Postfix conveyor belt, so to say, only to be used by Amavis. Lets set up this new daemon:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;127.0.0.1:10025 inet n    -       n       -       -     smtpd
    -o &lt;span class="nv"&gt;content_filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;smtpd_delay_reject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no
    -o &lt;span class="nv"&gt;smtpd_client_restrictions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;permit_mynetworks,reject
    -o &lt;span class="nv"&gt;smtpd_helo_restrictions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;smtpd_sender_restrictions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;smtpd_recipient_restrictions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;permit_mynetworks,reject
    -o &lt;span class="nv"&gt;smtpd_data_restrictions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reject_unauth_pipelining
    -o &lt;span class="nv"&gt;smtpd_end_of_data_restrictions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;smtpd_restriction_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;mynetworks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;127.0.0.0/8
    -o &lt;span class="nv"&gt;smtpd_error_sleep_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
    -o &lt;span class="nv"&gt;smtpd_soft_error_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1001
    -o &lt;span class="nv"&gt;smtpd_hard_error_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000
    -o &lt;span class="nv"&gt;smtpd_client_connection_count_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
    -o &lt;span class="nv"&gt;smtpd_client_connection_rate_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
    -o &lt;span class="nv"&gt;receive_override_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no_header_body_checks,no_unknown_recipient_checks,no_milters,no_address_mappings
    -o &lt;span class="nv"&gt;local_header_rewrite_clients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;smtpd_milters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;local_recipient_maps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    -o &lt;span class="nv"&gt;relay_recipient_maps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Waah! What's all this? &lt;/p&gt;
&lt;p&gt;Well, its nothing more then a new SMTP daemon, running on your localhost ip on port 10025 (remeber my mental note about $notify_method and $forward method?).
It has as many as 20 overwrites under it, all are used to overwrite default settings you may have set for your normal Postfix SMTP deamon.
You will recognize many lines from chapter 1 and some new lines that may look unfamiliar to you.&lt;/p&gt;
&lt;p&gt;We could go about and explain each line in more detail but that unnecessary this time. All you need to remeber is that this deamon is used only by Amavis to send mail back to Postfix.
Any mail coming out of Amavis has the correct labeling and we can assume that these messages are save to re-inject or to put back on our conveyor belt.
To do more checking on this deamon would be redundant and would only consume more system resources.&lt;/p&gt;
&lt;p&gt;Save that &lt;em&gt;master.cf&lt;/em&gt; file and stop your Postfix daemon (&lt;em&gt;don't restart it&lt;/em&gt;). We first have to make sure that our Spamassassin and ClamAV daemons are running and setup to run by default.
First start the Spamassassin, ClamAV and Amavis daemon:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/etc/init.d/spamassassin start
&lt;span class="nv"&gt;$ &lt;/span&gt;/etc/init.d/clamd start
&lt;span class="nv"&gt;$ &lt;/span&gt;/etc/init.d/amavisd start
&lt;/pre&gt;


&lt;p&gt;Then make sure that after reboot all daemons are automatically started:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chkconfig spamassassin on
&lt;span class="nv"&gt;$ &lt;/span&gt;chkconfig clamd on
&lt;span class="nv"&gt;$ &lt;/span&gt;chkconfig amavisd on
&lt;/pre&gt;


&lt;p&gt;Now you can start the Postfix daemon:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/etc/init.d/postfix start
&lt;/pre&gt;


&lt;p&gt;If all is well, we now should have basic spam and virus protection up and running!
Check you maillog, it should say all kinds of neat messages about Amavis decoders, AV Scanners, etc.
Also check if Postfix is still accepting mail by putting a follow tail on your maillog and sending mail from external to one of your mailboxes:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tail -f /var/log/maillog
&lt;/pre&gt;


&lt;p&gt;When you hit send in your external mail program, the maillog should show some lines ending with "(delivered to maildir)".&lt;/p&gt;
&lt;p&gt;Now lets do some testing before we continue. Lets see if the Amavis service is actually listening:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;telnet localhost 10024
&lt;/pre&gt;


&lt;p&gt;This should bring up a telnet interface stating that amavisd-new service is ready.
Send a "ehlo" command on that telnet interface so see if you get output:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ehlo localhost
&lt;/pre&gt;


&lt;p&gt;If it prints a bunch of lines starting with "250" you are in the clear. Type "quit" to exit the telnet.
Second we want to test if our SMTP daemon we created above, the daemon used for re-injection, is also up and running:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;telnet localhost 10025
&lt;/pre&gt;


&lt;p&gt;This should start a new telnet interface with a line reading something like "220 mail.foo.com".
Again give the ehlo command to see if we get something:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ehlo localhost
&lt;/pre&gt;


&lt;p&gt;Another row of 250 lines? Good! Use quit to exit this telnet and lets move on!&lt;/p&gt;
&lt;p&gt;Now its time to tell Postfix to pass all incoming mail to the small conveyor belt of our Amavis workers.
Open up your main.cf file and at the end, where you inserted the PostgreSQL lines in the previous chapter, add this simple line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ content_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; amavisfeed:&lt;span class="o"&gt;[&lt;/span&gt;127.0.0.1&lt;span class="o"&gt;]&lt;/span&gt;:10024
&lt;/pre&gt;


&lt;p&gt;And there you have it, Postfix will now allow Amavis to pull through all the mail!&lt;/p&gt;
&lt;p&gt;Now its time for sending some virusses and spam to our server, the proof of the pudding is in the eating so to speak.
First, lets see if our Amavis milters catch this virus test string created by the folks over at eircar.org.
Send the following string as a plain text message from an external mailserver to your mailserver and check your maillog after sending:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="x"&gt;X5O!P%@AP[4\PZX54(P^)7CC)7}&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;EICAR&lt;/span&gt;&lt;span class="x"&gt;-STANDARD-ANTIVIRUS-TEST-FILE!&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="x"&gt;+H*&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This string is save to send and does not contain a virus, read more about this at &lt;a href="http://www.eicar.org/86-0-Intended-use.html"&gt;Eicar&lt;/a&gt;.
This merely triggers Amavis's and in turn ClamAV's warning light and it will alert you of a possible virus in the maillog.
Your maillog will contain a bunch of new lines about this message where one will say something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mail amavis&lt;span class="o"&gt;[&lt;/span&gt;5112&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;(&lt;/span&gt;05112-03&lt;span class="o"&gt;)&lt;/span&gt; Blocked INFECTED &lt;span class="o"&gt;(&lt;/span&gt;Eicar-Test-Signature&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you see this, congratulations, Amavis, ClamAV and Postfix are working together nicely! &lt;/p&gt;
&lt;p&gt;Now lets do a spam test. The website of Spamassassin delivers us with a same type of string that will fire your setup's spam warning lights.
Again, send a plain text email with the following string:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X
&lt;/pre&gt;


&lt;p&gt;Now check your maillog, again a bunch of new lines and one of them should say:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mail amavis&lt;span class="o"&gt;[&lt;/span&gt;5113&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;(&lt;/span&gt;05113-03&lt;span class="o"&gt;)&lt;/span&gt; Blocked SPAM.
&lt;/pre&gt;


&lt;p&gt;Good, everything seems up and running!&lt;/p&gt;
&lt;p&gt;Now in your maillog you may also have noticed that it tries to alert you of this virus or spam via the address virusalert@yourdomain.com.
You can of course set this to any address you like by editing the amavisd.conf file.
Search for the variable "$virus_admin" and change the "virusalert" part into any other mailbox or alias that you wish to receive notifications on.&lt;/p&gt;
&lt;p&gt;Whats next?&lt;/p&gt;
&lt;p&gt;Well, the world of viruses and spam is changing rapidly, every day. To have a good protection it is thus necessary to also keep our systems up to date.
First lets auto-update Spamassassin. Spamassassin already prepared a cronfile for us that updates its spam rules.
The cronfile is located in &lt;em&gt;/usr/share/spamassassin/sa-update.cron&lt;/em&gt;. During install, Spamassassin already added a cronjob for this file in &lt;em&gt;/etc/cron.d/sa-update&lt;/em&gt;.
Just open the last file and check if the line is not commented:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; * * * root /usr/share/spamassassin/sa-update.cron 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee -a /var/log/sa-update.log
&lt;/pre&gt;


&lt;p&gt;Once a day this will update the spam rules via cron if you have enabled it in your crontab file.
To enable this in our crontab file, op this file at "/etc/crontab" and make sure that our hourly, daily, weekly and monthly scripts are there.
By default this file is empty, only with a comment header telling you about how to use the crontab. You can enable the different cronjobs by adding this to your crontab:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt; * * * * root run-parts /etc/cron.hourly 
  &lt;span class="m"&gt;02&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; * * * root run-parts /etc/cron.daily 
  &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; * * &lt;span class="m"&gt;0&lt;/span&gt; root run-parts /etc/cron.weekly 
  &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; * * root run-parts /etc/cron.monthly
&lt;/pre&gt;


&lt;p&gt;Save this file. Now all the cronjoobs in the various cron.* directories are executed at their set interval.
Now make sure the cron daemon is running:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/etc/init.d/crond start
&lt;/pre&gt;


&lt;p&gt;And set it to run automatically after reboot:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chkconfig crond on
&lt;/pre&gt;


&lt;p&gt;After the first cron has run, you can check the update log file at &lt;em&gt;/var/log/sa-update.log&lt;/em&gt; to see if everything went well.
You can always call &lt;em&gt;sa-update&lt;/em&gt; manually and restart Spamassassin by issuing the following command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sa-update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /etc/init.d/spamassassin restart
&lt;/pre&gt;


&lt;p&gt;The next one up is ClamAV's virus definition files. Also here ClamAV already installed a cronjob for us that updates the definition database one time each day.
It uses a shellscript called "freshclam" which can be found at &lt;em&gt;/etc/cron.daily/freshclam&lt;/em&gt; to do the job. Since you already configured your cronjobs to run, everything is setup.
Also here we can check a log file to see if it is being updated. This file is located here: &lt;em&gt;/var/log/clamav/freshclam.log&lt;/em&gt;.
This update can also be triggered manually by issuing the following command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;freshclam &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /etc/init.d/clamd restart
&lt;/pre&gt;


&lt;p&gt;Okay, we are through! We now have full virus and spam protection up and running.
This chapter wasn't to bad, right?&lt;/p&gt;
&lt;p&gt;On to &lt;a href="http://shisaa.be/postset/mailserver-4.html" title="Fourth chapter of this mailserver series"&gt;chapter 4&lt;/a&gt;, where we will setup Dovecot which will connect our beautiful factory to the outside world!&lt;/p&gt;
&lt;p&gt;And as always, thanks for reading!&lt;/p&gt;&lt;/div&gt;</description><category>amavis</category><category>postfix</category><category>unix</category><guid>http://shisaa.be/postset/mailserver-3.html</guid><pubDate>Fri, 05 Apr 2013 18:00:00 GMT</pubDate></item></channel></rss>